{"version":3,"sources":["img/search-icon.svg","components/InputField/InputField.js","components/FormSearch/FormSearch.js","components/Header/Header.js","components/UserMessage/UserMessage.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","InputField","this","props","className","classNames","PureComponent","FormSearch","onSubmit","onClick","type","placeholder","onChange","value","src","searchIcon","alt","Header","UserMessage","title","body","Main","userData","length","SELF","myHeaders","Headers","fetch","method","headers","mode","cache","then","response","ok","json","data","updateData","console","log","map","el","key","id","App","state","filteredUserData","searchValue","isFiltered","bind","handleChange","handleClick","filterArray","filterArrayByName","setState","event","target","e","preventDefault","dataArray","tempArray","i","filter","name","j","slice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.196a9521.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/search-icon.4fe8a6a6.svg\";","import React, { PureComponent } from \"react\";\r\nimport \"./InputField.css\";\r\nimport classNames from \"classnames\";\r\n\r\nclass InputField extends PureComponent {\r\n  render() {\r\n    return (\r\n      <input\r\n        {...this.props}\r\n        className={classNames(\"input-field\", this.props.className)}\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default InputField;\r\n","import React, { PureComponent } from \"react\";\r\nimport \"./FormSearch.css\";\r\nimport InputField from \"../InputField/InputField\";\r\nimport searchIcon from \"../../img/search-icon.svg\";\r\nimport classNames from \"classnames\";\r\n\r\nclass FormSearch extends PureComponent {\r\n  render() {\r\n    return (\r\n      <form\r\n        className={classNames(\"form-search\", this.props.className)}\r\n        onSubmit={this.props.onClick}\r\n      >\r\n        <InputField\r\n          type=\"text\"\r\n          className=\"form-search__input\"\r\n          placeholder=\"Search\"\r\n          onChange={this.props.onChange}\r\n          value={this.props.value}\r\n        />\r\n        <button\r\n          className=\"form-search__button\"\r\n          onClick={this.props.onClick}\r\n          type=\"button\"\r\n        >\r\n          <img src={searchIcon} alt=\"Search\" />\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default FormSearch;\r\n","import React, { PureComponent } from \"react\";\r\nimport \"./Header.css\";\r\nimport FormSearch from \"../FormSearch/FormSearch\";\r\n\r\nclass Header extends PureComponent {\r\n  render() {\r\n    return (\r\n      <header className=\"header\">\r\n        <div className=\"header__background\">\r\n          <div className=\"header__headline\">\r\n            <div className=\"header__name\">Messages</div>\r\n            <div className=\"header__unread-messages\">137</div>\r\n          </div>\r\n          <FormSearch\r\n            className=\"header__form-search\"\r\n            onChange={this.props.onChange}\r\n            onClick={this.props.onClick}\r\n            value={this.props.value}\r\n          />\r\n        </div>\r\n      </header>\r\n    );\r\n  }\r\n}\r\nexport default Header;\r\n","import React, { PureComponent } from \"react\";\r\nimport \"./UserMessage.css\";\r\nimport classNames from \"classnames\";\r\n\r\nclass UserMessage extends PureComponent {\r\n  render() {\r\n    return (\r\n      <div className={classNames(\"user-message\", this.props.className)}>\r\n        <img\r\n          className=\"user-message__user-avatar\"\r\n          src=\"https://randomuser.me/api/portraits/thumb/men/65.jpg\"\r\n          alt=\"Avatar\"\r\n        />\r\n        <div className=\"user-message__info\">\r\n          <div className=\"user-message__name-and-time\">\r\n            <div className=\"user-message__user-name\">{this.props.title}</div>\r\n            <div className=\"user-message__sending-time\">11:00 AM</div>\r\n          </div>\r\n          <div className=\"user-message__message-text\">{this.props.body}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default UserMessage;\r\n","import React, { PureComponent } from \"react\";\r\nimport \"./Main.css\";\r\nimport UserMessage from \"../UserMessage/UserMessage\";\r\n\r\nclass Main extends PureComponent {\r\n  UNSAFE_componentWillMount() {\r\n    if (this.props.userData.length !== 0) {\r\n      return null;\r\n    } else {\r\n      const SELF = this;\r\n      let myHeaders = new Headers();\r\n      fetch(\"https://jsonplaceholder.typicode.com/posts\", {\r\n        method: \"GET\",\r\n        headers: myHeaders,\r\n        mode: \"cors\",\r\n        cache: \"default\"\r\n      }).then(function(response) {\r\n        if (!response.ok) {\r\n          console.log(\"Не успешно\");\r\n        } else {\r\n          response.json().then(function(data) {\r\n            SELF.props.updateData(data);\r\n            console.log(\"Успешно\");\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <main className=\"main\">\r\n        {this.props.userData.map(el => (\r\n          <UserMessage\r\n            className=\"main__user-message\"\r\n            key={el.id}\r\n            title={el.title}\r\n            body={el.body}\r\n          />\r\n        ))}\r\n      </main>\r\n    );\r\n  }\r\n}\r\nexport default Main;\r\n","import React, { PureComponent } from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"../src/components/Header/Header\";\r\nimport Main from \"../src/components/Main/Main\";\r\n\r\nclass App extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      userData: [],\r\n      filteredUserData: [],\r\n      searchValue: \"\",\r\n      isFiltered: false\r\n    };\r\n    this.updateData = this.updateData.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.filterArray = this.filterArray.bind(this);\r\n    this.filterArrayByName = this.filterArrayByName.bind(this);\r\n  }\r\n\r\n  updateData(data) {\r\n    this.setState({ userData: data });\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ searchValue: event.target.value });\r\n  }\r\n\r\n  handleClick(e) {\r\n    e.preventDefault();\r\n    this.filterArray(this.state.searchValue, this.state.userData);\r\n  }\r\n\r\n  filterArray(searchValue, dataArray) {\r\n    let tempArray = dataArray;\r\n    if (searchValue === \"\") {\r\n      this.setState({ isFiltered: false });\r\n    } else {\r\n      this.setState({ isFiltered: true });\r\n      for (let i = 0; i < dataArray.length; i++) {\r\n        if (\r\n          this.filterArrayByName(searchValue, dataArray, \"body\", i) !== true &&\r\n          this.filterArrayByName(searchValue, dataArray, \"title\", i) !== true\r\n        ) {\r\n          tempArray = tempArray.filter(el => el.id !== i + 1);\r\n        }\r\n      }\r\n      this.setState({ filteredUserData: tempArray });\r\n      console.log(this.state.userData);\r\n    }\r\n  }\r\n\r\n  filterArrayByName(searchValue, dataArray, name, i) {\r\n    for (let j = 0; j <= dataArray[i][name].length; j++) {\r\n      if (searchValue === dataArray[i][name].slice(j, j + searchValue.length)) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header\r\n          onChange={this.handleChange}\r\n          onClick={this.handleClick}\r\n          value={this.props.searchValue}\r\n        />\r\n        <Main\r\n          userData={\r\n            !this.state.isFiltered\r\n              ? this.state.userData\r\n              : this.state.filteredUserData\r\n          }\r\n          updateData={this.updateData}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}